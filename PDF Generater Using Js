  const generatePDF = () => {
    const doc = new jsPDF();

    // Set title and report date
    doc.setFontSize(12);
    doc.text("Maintenance Records Report", 14, 10);

    const reportDate = new Date().toLocaleDateString();
    doc.setFontSize(10);
    doc.text(`Report Generated: ${reportDate}`, 14, 15);
    const VehicleName = filteredData[0]?.vehicleName || "Name Unavailable";
    doc.text(`Vehicle Name: ${VehicleName}`, 14, 20);
    const vehicleRegistration =
      filteredData[0]?.registrationNumber || "Registration Unavailable";
    doc.text(`Registration Number: ${vehicleRegistration}`, 14, 25);
    doc.text(`Company Name: ${selectedCompanyName}`, 14, 30);

    // Define table columns
    const tableColumn = [
      "Issues",
      "Organisation",
      "Repair Status",
      "Job Number",
      "Memo",
      "Parts",
      "Labour Hours",
      "Cost",
      "Signed Off By",
      "Date",
    ];

    // Calculate available space for columns
    const pageWidth = doc.internal.pageSize.width;
    const startX = 14;
    const startY = 42;
    const padding = 6;
    const lineHeight = 9;
    const columnWidth = 35;
    const pageHeight = doc.internal.pageSize.height;

    // Determine how many columns fit on the page
    const maxColumnsPerRow = Math.floor((pageWidth - startX) / columnWidth);

    let currentY = startY;

    // Function to render column headers
    const renderHeaders = (startIndex) => {
      let currentX = startX;
      for (
        let i = startIndex;
        i < tableColumn.length && i < startIndex + maxColumnsPerRow;
        i++
      ) {
        doc.text(tableColumn[i], currentX + padding, currentY);
        doc.rect(currentX, currentY - 4, columnWidth, lineHeight);
        currentX += columnWidth;
      }
      currentY += lineHeight; // Move down for the row data
    };

    // Add table rows
    filteredData.forEach((row) => {
      row.repairHistory.forEach((repair) => {
        const rowData = [
          row.issues || "N/A",
          row.organisation || "N/A",
          row.repairStatus || "N/A",
          row.jobNumber || "N/A",
          row.memo || "N/A",
          repair.parts
            .map(
              (part) =>
                `${part.partNumber || "N/A"}: ${part.partName || "N/A"} - $${
                  part.price || 0
                } (${part.supplier || "N/A"})`
            )
            .join(", "),
          row.labourHours || "N/A",
          `$${row.cost || 0}`,
          row.signedOffBy || "N/A",
          (() => {
            const date = new Date(row.date);
            const formattedDate = `${String(date.getMonth() + 1).padStart(
              2,
              "0"
            )}/${String(date.getDate()).padStart(
              2,
              "0"
            )}/${date.getFullYear()}`;
            return formattedDate;
          })() || "N/A",
        ];

        let currentX = startX;

        // Wrap columns into new rows when exceeding max columns per row
        for (let i = 0; i < rowData.length; i++) {
          // Add column headers for new rows
          if (i % maxColumnsPerRow === 0) {
            // Check if a new page is needed
            if (currentY + lineHeight > pageHeight - 20) {
              doc.addPage();
              currentY = 20;
            }
            renderHeaders(i); // Render headers for current set of columns
          }

          // Check if a new page is needed
          if (currentY + lineHeight > pageHeight - 20) {
            doc.addPage();
            currentY = 20;
            renderHeaders(i); // Render headers again on the new page
          }

          // Print the data for each column
          const cellText = doc.splitTextToSize(
            rowData[i],
            columnWidth - padding
          );
          doc.text(cellText, currentX + padding, currentY);
          doc.rect(
            currentX,
            currentY - 4,
            columnWidth,
            lineHeight * cellText.length
          );

          currentX += columnWidth;

          // Wrap to a new line if necessary
          if ((i + 1) % maxColumnsPerRow === 0) {
            currentY += lineHeight * cellText.length;
            currentX = startX;
          }
        }
        // Move to the next row after each entry
        currentY += lineHeight;
      });
    });

    // Save the PDF
    doc.save("Maintenance_Report.pdf");
  };
